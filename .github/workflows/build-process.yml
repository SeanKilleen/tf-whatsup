# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build Process

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  CODE_LOCATION: /home/runner/work/tf-whatsup/tf-whatsup/src/
  CONSOLE_PROJECT_LOCATION: /home/runner/work/tf-whatsup/tf-whatsup/src/TFWhatsUp.Console/
  RELEASE_LOCATION: /home/runner/work/tf-whatsup/tf-whatsup/src/TFWhatsUp.Console/bin/Release/net7.0/
  PUBLISH_COMMAND_FLAGS: "-c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true --sc false"
  PUBLISH_COMMAND_FLAGS_SC: "-c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true --sc true"
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-api-key: ${{ secrets.NUGET_API_KEY }}
          nuget-version: "5.x"
      - name: Restore dependencies
        run: dotnet restore
        working-directory: "${{env.CODE_LOCATION}}"
      - name: Restore tools
        run: dotnet tool restore
        working-directory: "${{env.CODE_LOCATION}}"
      - name: Set Version Number
        working-directory: "${{env.CODE_LOCATION}}"
        run: |
          VERSION=$(dotnet minver -t v -v e)
          echo "$VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Home: $HOME"
      - name: Build
        working-directory: "${{env.CODE_LOCATION}}"
        run: dotnet build -c Release --no-restore
      - name: Test
        working-directory: "${{env.CODE_LOCATION}}"
        run: dotnet test -c Release --no-build --verbosity normal
      - name: Publish Single-File .EXEs
        working-directory: "${{env.CODE_LOCATION}}"
        run: |
          dotnet publish -r linux-x64 ${{env.PUBLISH_COMMAND_FLAGS}}
          dotnet publish -r osx-x64 ${{env.PUBLISH_COMMAND_FLAGS}}
          dotnet publish -r win-x64 ${{env.PUBLISH_COMMAND_FLAGS}}
      - name: ZIP Single-File .EXEs
        working-directory: "${{env.CODE_LOCATION}}"
        run: |
          mkdir ${{env.CODE_LOCATION}}output
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_linux-x64.tar.gz ${{env.RELEASE_LOCATION}}linux-x64/publish/*.*
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_osx-x64.tar.gz ${{env.RELEASE_LOCATION}}osx-x64/publish/*.*
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_win-x64.tar.gz ${{env.RELEASE_LOCATION}}win-x64/publish/*.*
          pwd
          ls ./*.*
          find ${{env.CODE_LOCATION}} -name tfwhatsup_win-x64.tar.gz
      - name: Clear the publish directories
        run: |
          rm -rf ${{env.RELEASE_LOCATION}}linux-x64/publish
          rm -rf ${{env.RELEASE_LOCATION}}osx-x64/publish
          rm -rf ${{env.RELEASE_LOCATION}}win-x64/publish
      - name: Publish Self-Contained .EXEs
        working-directory: "${{env.CODE_LOCATION}}"
        run: |
          dotnet publish -r linux-x64 ${{env.PUBLISH_COMMAND_FLAGS_SC}}
          dotnet publish -r osx-x64 ${{env.PUBLISH_COMMAND_FLAGS_SC}}
          dotnet publish -r win-x64 ${{env.PUBLISH_COMMAND_FLAGS_SC}}
      - name: ZIP Self-Contained .EXEs
        working-directory: "${{env.CODE_LOCATION}}"
        run: |
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_linux-x64_selfcontained.tar.gz ${{env.RELEASE_LOCATION}}linux-x64/publish/*.*
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_osx-x64_selfcontained.tar.gz ${{env.RELEASE_LOCATION}}osx-x64/publish/*.*
          tar cvzf ${{env.CODE_LOCATION}}output/tfwhatsup_win-x64_selfcontained.tar.gz ${{env.RELEASE_LOCATION}}win-x64/publish/*.*
          pwd
          ls ./*.*
      - name: Pack
        working-directory: "${{env.CODE_LOCATION}}/TFWhatsUp.Console"
        run: dotnet pack -c Release --no-build --verbosity normal
      - name: "Save Artifact: NuGet Package"
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: nuget-package
          path: "**/*.nupkg"
      - name: Go to Output Directory # To set up artifacts to work
        run: |
          cd ${{env.CODE_LOCATION}}output
          pwd
      - name: "Save Artifact: tfwhatsup_win-x64"
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: tfwhatsup_win-x64
          path: "/home/runner/work/tf-whatsup/tf-whatsup/src/output/tfwhatsup_win-x64.tar.gz"
      - name: "Save Artifact: tfwhatsup_linux-x64"
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: tfwhatsup_linux-x64
          path: "/home/runner/work/tf-whatsup/tf-whatsup/src/output/tfwhatsup_linux-x64.tar.gz"
      - name: "Save Artifact: tfwhatsup_osx-x64"
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: tfwhatsup_osx-x64
          path: "/home/runner/work/tf-whatsup/tf-whatsup/src/output/tfwhatsup_osx-x64.tar.gz"
      # - name: Create GitHub Release With Assets
      #   if: github.ref == 'refs/heads/main'
      #   uses: softprops/action-gh-release@v1
      #   id: create_release
      #   with:
      #     tag_name: "v${{env.VERSION}}"
      #     draft: false
      #     prerelease: false
      #     fail_on_unmatched_files: true
      #     generate_release_notes: true
      #     # files: |
      #     #   "/home/runner/work/tf-whatsup/tf-whatsup/src/TFWhatsUp.Console/nupkg/TFWhatsUp.Console.${{env.VERSION}}.nupkg"
      # - name: Publish Nuget
      #   if: github.ref == 'refs/heads/main'
      #   working-directory: "${{env.CODE_LOCATION}}/TFWhatsUp.Console/nupkg"
      #   run: nuget push **/*.nupkg -Source 'https://api.nuget.org/v3/index.json'
